{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn import linear_model\n",
    "import matplotlib.pyplot as plt\n",
    "import statsmodels.formula.api as smf\n",
    "from statsmodels.sandbox.regression.predstd import wls_prediction_std"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_excel(r'C:\\Users\\Computer\\Desktop\\School\\xls\\offenses_new_york_by_city_2013.xls', header = None)\n",
    "#remove empty rows for data analysis\n",
    "fbi_df = df.drop([0, 1, 2, 3, 4, 353, 354, 355])\n",
    "#fix columns\n",
    "fbi_df.columns = ['City', 'Population', 'Violent crime', 'Murder', 'Rape', 'Rape(revised)','Robbery', 'Aggravated assault',\n",
    "              'Propertycrime', 'Burglary', 'Larceny-theft', 'Motorvehicletheft', 'Arson']\n",
    "#avoid nan/string errors\n",
    "fbi_df['Murder'] = pd.to_numeric(fbi_df['Murder'])\n",
    "fbi_df['Robbery'] = pd.to_numeric(fbi_df['Robbery'])\n",
    "fbi_df['Population'] = pd.to_numeric(fbi_df['Population'])\n",
    "fbi_df['Propertycrime'] = pd.to_numeric(fbi_df['Propertycrime'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#make outcome categorical\n",
    "murder = np.array(fbi_df['Murder'].values.tolist())\n",
    "robbery = np.array(fbi_df['Robbery'].values.tolist())\n",
    "\n",
    "fbi_df['Murder'] = np.where(murder > 0, 1, murder).tolist()\n",
    "fbi_df['Robbery'] = np.where(robbery > 0, 1, robbery).tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Computer\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\scipy\\stats\\stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.\n",
      "  return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1c33e657358>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.regplot(fbi_df['Population'],fbi_df['Propertycrime'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "City                  New York\n",
       "Population             8396126\n",
       "Violent crime            52384\n",
       "Murder                     335\n",
       "Rape                       NaN\n",
       "Rape(revised)             1112\n",
       "Robbery                  19170\n",
       "Aggravated assault       31767\n",
       "Propertycrime           141971\n",
       "Burglary                 16606\n",
       "Larceny-theft           117931\n",
       "Motorvehicletheft         7434\n",
       "Arson                      NaN\n",
       "Name: 221, dtype: object"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#20000 for property crime seems like a lot, is this an error or is this accurate?\n",
    "fbi_df.loc[fbi_df['Murder'].idxmax()]\n",
    "#it is New York which has a dense population, so let's leave it in the analysis for now but may need to remove"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([347.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   1.]),\n",
       " array([5.260000e+02, 8.400860e+05, 1.679646e+06, 2.519206e+06,\n",
       "        3.358766e+06, 4.198326e+06, 5.037886e+06, 5.877446e+06,\n",
       "        6.717006e+06, 7.556566e+06, 8.396126e+06]),\n",
       " <a list of 10 Patch objects>)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXoAAAEJCAYAAACaFuz/AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvOIA7rQAAEYhJREFUeJzt3X+MZWV9x/H3RxbRVisog9nurl1q1x9o4mKmSGvSKpiKmLiYiFlSFe3GVYtGozFF+4falkTbKomJpV0DZTUqblHLRlFLEaM2gg66IgulrkJl3A07/gAlRir47R9zNo7LMPfM3LlzZ599v5Kbe85znnPOd57sfubsc889m6pCktSuh427AEnSaBn0ktQ4g16SGmfQS1LjDHpJapxBL0mNM+glqXEGvSQ1zqCXpMatGXcBACeeeGJt3Lhx3GVI0hHlxhtv/GFVTQzqtyqCfuPGjUxNTY27DEk6oiT53z79nLqRpMYZ9JLUOINekho3MOiTPCLJ15J8K8neJO/q2i9PcnuSPd1rc9eeJO9Psi/JTUmeOeofQpL00Pp8GHsfcEZV3ZvkWOArST7bbXtrVV15WP8XAJu617OAS7p3SdIYDLyir1n3dqvHdq+F/reSLcCHuv2uB45Psnb4UiVJS9Frjj7JMUn2AAeBa6rqhm7TRd30zMVJjuva1gF3ztl9umuTJI1Br6CvqgeqajOwHjgtydOBtwFPAf4QeCzwV133zHeIwxuSbE8ylWRqZmZmScVLkgZb1F03VXU38EXgrKo60E3P3Af8K3Ba120a2DBnt/XA/nmOtaOqJqtqcmJi4Be7JElLNPDD2CQTwC+r6u4kjwSeB7wnydqqOpAkwDnAzd0uu4HXJ7mC2Q9h76mqAyOqn40XfmZUhx7ojne/cGznlqS++tx1sxbYmeQYZv8FsKuqPp3kC90vgQB7gNd2/a8Gzgb2AT8HXrX8ZUuS+hoY9FV1E3DqPO1nPET/Ai4YvjRJ0nLwm7GS1DiDXpIaZ9BLUuMMeklqnEEvSY0z6CWpcQa9JDXOoJekxhn0ktQ4g16SGmfQS1LjDHpJapxBL0mNM+glqXEGvSQ1zqCXpMYZ9JLUOINekhpn0EtS4wx6SWqcQS9JjRsY9EkekeRrSb6VZG+Sd3XtJye5Icl3knw8ycO79uO69X3d9o2j/REkSQvpc0V/H3BGVT0D2AycleR04D3AxVW1CfgJsK3rvw34SVX9AXBx10+SNCYDg75m3dutHtu9CjgDuLJr3wmc0y1v6dbptp+ZJMtWsSRpUXrN0Sc5Jske4CBwDfBd4O6qur/rMg2s65bXAXcCdNvvAR63nEVLkvrrFfRV9UBVbQbWA6cBT52vW/c+39V7Hd6QZHuSqSRTMzMzfeuVJC3Sou66qaq7gS8CpwPHJ1nTbVoP7O+Wp4ENAN32xwA/nudYO6pqsqomJyYmlla9JGmgPnfdTCQ5vlt+JPA84FbgOuAlXbfzgau65d3dOt32L1TVg67oJUkrY83gLqwFdiY5htlfDLuq6tNJbgGuSPJ3wDeBS7v+lwIfTrKP2Sv5rSOoW5LU08Cgr6qbgFPnaf8es/P1h7f/Ajh3WaqTJA3Nb8ZKUuMMeklqnEEvSY0z6CWpcQa9JDXOoJekxhn0ktQ4g16SGmfQS1LjDHpJapxBL0mNM+glqXEGvSQ1zqCXpMYZ9JLUOINekhpn0EtS4wx6SWqcQS9JjTPoJalxBr0kNW5g0CfZkOS6JLcm2ZvkjV37O5P8IMme7nX2nH3elmRfktuSPH+UP4AkaWFrevS5H3hLVX0jyaOBG5Nc0227uKr+cW7nJKcAW4GnAb8L/GeSJ1XVA8tZuCSpn4FX9FV1oKq+0S3/DLgVWLfALluAK6rqvqq6HdgHnLYcxUqSFm9Rc/RJNgKnAjd0Ta9PclOSy5Kc0LWtA+6cs9s0C/9ikCSNUO+gT/Io4BPAm6rqp8AlwBOBzcAB4L2Hus6ze81zvO1JppJMzczMLLpwSVI/vYI+ybHMhvxHquqTAFV1V1U9UFW/Aj7Ir6dnpoENc3ZfD+w//JhVtaOqJqtqcmJiYpifQZK0gD533QS4FLi1qt43p33tnG4vBm7ulncDW5Mcl+RkYBPwteUrWZK0GH3uunk28HLg20n2dG1vB85LspnZaZk7gNcAVNXeJLuAW5i9Y+cC77iRpPEZGPRV9RXmn3e/eoF9LgIuGqIuSdIy8ZuxktQ4g16SGmfQS1LjDHpJapxBL0mNM+glqXEGvSQ1zqCXpMYZ9JLUOINekhpn0EtS4wx6SWqcQS9JjTPoJalxBr0kNc6gl6TGGfSS1DiDXpIaZ9BLUuMMeklqnEEvSY0bGPRJNiS5LsmtSfYmeWPX/tgk1yT5Tvd+QteeJO9Psi/JTUmeOeofQpL00Ppc0d8PvKWqngqcDlyQ5BTgQuDaqtoEXNutA7wA2NS9tgOXLHvVkqTeBgZ9VR2oqm90yz8DbgXWAVuAnV23ncA53fIW4EM163rg+CRrl71ySVIvi5qjT7IROBW4AXh8VR2A2V8GwEldt3XAnXN2m+7aDj/W9iRTSaZmZmYWX7kkqZfeQZ/kUcAngDdV1U8X6jpPWz2ooWpHVU1W1eTExETfMiRJi9Qr6JMcy2zIf6SqPtk133VoSqZ7P9i1TwMb5uy+Hti/POVKkharz103AS4Fbq2q983ZtBs4v1s+H7hqTvsrurtvTgfuOTTFI0laeWt69Hk28HLg20n2dG1vB94N7EqyDfg+cG637WrgbGAf8HPgVctasSRpUQYGfVV9hfnn3QHOnKd/ARcMWZckaZn4zVhJapxBL0mNM+glqXEGvSQ1zqCXpMYZ9JLUOINekhpn0EtS4wx6SWqcQS9JjTPoJalxBr0kNc6gl6TGGfSS1DiDXpIaZ9BLUuMMeklqnEEvSY0z6CWpcQa9JDXOoJekxg0M+iSXJTmY5OY5be9M8oMke7rX2XO2vS3JviS3JXn+qAqXJPXT54r+cuCsedovrqrN3etqgCSnAFuBp3X7/FOSY5arWEnS4g0M+qr6EvDjnsfbAlxRVfdV1e3APuC0IeqTJA1pmDn61ye5qZvaOaFrWwfcOafPdNf2IEm2J5lKMjUzMzNEGZKkhSw16C8BnghsBg4A7+3aM0/fmu8AVbWjqiaranJiYmKJZUiSBllS0FfVXVX1QFX9Cvggv56emQY2zOm6Htg/XImSpGEsKeiTrJ2z+mLg0B05u4GtSY5LcjKwCfjacCVKkoaxZlCHJB8DngOcmGQaeAfwnCSbmZ2WuQN4DUBV7U2yC7gFuB+4oKoeGE3pkqQ+BgZ9VZ03T/OlC/S/CLhomKIkScvHb8ZKUuMMeklqnEEvSY0z6CWpcQa9JDXOoJekxhn0ktQ4g16SGmfQS1LjDHpJapxBL0mNM+glqXEGvSQ1zqCXpMYZ9JLUOINekhpn0EtS4wx6SWqcQS9JjTPoJalxA4M+yWVJDia5eU7bY5Nck+Q73fsJXXuSvD/JviQ3JXnmKIuXJA3W54r+cuCsw9ouBK6tqk3Atd06wAuATd1rO3DJ8pQpSVqqgUFfVV8CfnxY8xZgZ7e8EzhnTvuHatb1wPFJ1i5XsZKkxVvqHP3jq+oAQPd+Ute+DrhzTr/prk2SNCbL/WFs5mmreTsm25NMJZmamZlZ5jIkSYcsNejvOjQl070f7NqngQ1z+q0H9s93gKraUVWTVTU5MTGxxDIkSYMsNeh3A+d3y+cDV81pf0V3983pwD2HpngkSeOxZlCHJB8DngOcmGQaeAfwbmBXkm3A94Fzu+5XA2cD+4CfA68aQc2SpEUYGPRVdd5DbDpznr4FXDBsUZKk5eM3YyWpcQa9JDXOoJekxhn0ktQ4g16SGmfQS1LjDHpJapxBL0mNM+glqXEGvSQ1zqCXpMYZ9JLUOINekhpn0EtS4wx6SWqcQS9JjTPoJalxBr0kNc6gl6TGGfSS1DiDXpIat2aYnZPcAfwMeAC4v6omkzwW+DiwEbgDeGlV/WS4MiVJS7UcV/TPrarNVTXZrV8IXFtVm4Bru3VJ0piMYupmC7CzW94JnDOCc0iSeho26Av4jyQ3JtnetT2+qg4AdO8nDXkOSdIQhpqjB55dVfuTnARck+S/++7Y/WLYDvCEJzxhyDIkSQ9lqCv6qtrfvR8EPgWcBtyVZC1A937wIfbdUVWTVTU5MTExTBmSpAUsOeiT/HaSRx9aBv4MuBnYDZzfdTsfuGrYIiVJSzfM1M3jgU8lOXScj1bV55J8HdiVZBvwfeDc4cuUJC3VkoO+qr4HPGOe9h8BZw5TlCRp+fjNWElqnEEvSY0z6CWpcQa9JDXOoJekxhn0ktQ4g16SGmfQS1LjDHpJapxBL0mNM+glqXEGvSQ1zqCXpMYZ9JLUOINekhpn0EtS4wx6SWqcQS9JjTPoJalxBr0kNc6gl6TGjSzok5yV5LYk+5JcOKrzSJIWNpKgT3IM8AHgBcApwHlJThnFuSRJCxvVFf1pwL6q+l5V/R9wBbBlROeSJC1gzYiOuw64c876NPCsEZ1Lkoay8cLPjO3cd7z7hSM/x6iCPvO01W90SLYD27vVe5PctsRznQj8cIn7DiXvGcdZl2RsY3SEcHwGc4wWtuTxGTJHfq9Pp1EF/TSwYc76emD/3A5VtQPYMeyJkkxV1eSwx2mZY7Qwx2cwx2hhq318RjVH/3VgU5KTkzwc2ArsHtG5JEkLGMkVfVXdn+T1wOeBY4DLqmrvKM4lSVrYqKZuqKqrgatHdfw5hp7+OQo4RgtzfAZzjBa2qscnVTW4lyTpiOUjECSpcUdM0A96pEKS45J8vNt+Q5KNK1/lePUYozcnuSXJTUmuTdLr1qxW9H0sR5KXJKkkq/YuilHpM0ZJXtr9Odqb5KMrXeM49fg79oQk1yX5Zvf37Oxx1PkgVbXqX8x+oPtd4PeBhwPfAk45rM9fAv/cLW8FPj7uulfhGD0X+K1u+XVH0xj1GZ+u36OBLwHXA5Pjrnu1jRGwCfgmcEK3ftK4615l47MDeF23fApwx7jrrqoj5oq+zyMVtgA7u+UrgTOTzPfFrVYNHKOquq6qft6tXs/s9xuOFn0fy/G3wN8Dv1jJ4laJPmP0auADVfUTgKo6uMI1jlOf8Sngd7rlx3DY94fG5UgJ+vkeqbDuofpU1f3APcDjVqS61aHPGM21DfjsSCtaXQaOT5JTgQ1V9emVLGwV6fNn6EnAk5L8V5Lrk5y1YtWNX5/xeSfwsiTTzN51+IaVKW1hI7u9cpkNfKRCzz4t6/3zJ3kZMAn86UgrWl0WHJ8kDwMuBl65UgWtQn3+DK1hdvrmOcz+i/DLSZ5eVXePuLbVoM/4nAdcXlXvTfJHwIe78fnV6Mt7aEfKFf3ARyrM7ZNkDbP/bPrxilS3OvQZI5I8D/hr4EVVdd8K1bYaDBqfRwNPB76Y5A7gdGD3UfaBbN+/Z1dV1S+r6nbgNmaD/2jQZ3y2AbsAquqrwCOYfQ7OWB0pQd/nkQq7gfO75ZcAX6juE5GjxMAx6qYm/oXZkD+a5lZhwPhU1T1VdWJVbayqjcx+hvGiqpoaT7lj0efv2b8z+6E+SU5kdirneyta5fj0GZ/vA2cCJHkqs0E/s6JVzuOICPpuzv3QIxVuBXZV1d4kf5PkRV23S4HHJdkHvBk4qv5Xq55j9A/Ao4B/S7InyVHz/KGe43NU6zlGnwd+lOQW4DrgrVX1o/FUvLJ6js9bgFcn+RbwMeCVq+GC02/GSlLjjogreknS0hn0ktQ4g16SGmfQS1LjDHpJWmFJLktyMMnNPfpe3N0ltyfJ/yRZ9JfTvOtGklZYkj8B7gU+VFVPX8R+bwBOraq/WMz5vKKXpBVWVV/isG/uJ3liks8luTHJl5M8ZZ5dz2P2/vxFOVKedSNJrdsBvLaqvpPkWcA/AWcc2tj9/xEnA19Y7IENekkasySPAv6Y2W+tH2o+7rBuW4Erq+qBxR7foJek8XsYcHdVbV6gz1bggqUeXJI0RlX1U+D2JOcCZNYzDm1P8mTgBOCrSzm+QS9JKyzJx5gN7ScnmU6yDfhzYFv3QLS9/Ob/XnUecMVSH5Dm7ZWS1Div6CWpcQa9JDXOoJekxhn0ktQ4g16SGmfQS1LjDHpJapxBL0mN+3/a87qQFzmsewAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(fbi_df['Population'])\n",
    "#why is this notating to the 7th?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Make nonlinear variable that thinkful model suggests\n",
    "fbi_df['Population_sq'] = fbi_df['Population'] **2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Coefficients: \n",
      " [[ 1.59234099e-02 -1.01045767e-09  1.17559526e+02  2.09186042e+00]]\n",
      "\n",
      "Intercept: \n",
      " [24.1435902]\n",
      "\n",
      "R-squared:\n",
      "0.9987417422426106\n"
     ]
    }
   ],
   "source": [
    "regr = linear_model.LinearRegression()\n",
    "Y = fbi_df['Propertycrime'].values.reshape(-1,1)\n",
    "X = fbi_df[['Population', 'Population_sq', 'Murder', 'Robbery']]\n",
    "regr.fit(X,Y)\n",
    "\n",
    "print('\\nCoefficients: \\n', regr.coef_)\n",
    "print('\\nIntercept: \\n', regr.intercept_)\n",
    "print('\\nR-squared:')\n",
    "print(regr.score(X, Y))\n",
    "#overfitted, how do I fix this, can I just remove parameters at this point?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Coefficients:  Intercept        2.414359e+01\n",
      "Population       1.592341e-02\n",
      "Population_sq   -1.010458e-09\n",
      "Murder           1.175595e+02\n",
      "Robbery          2.091860e+00\n",
      "dtype: float64\n",
      "\n",
      "P values  Intercept        1.960648e-01\n",
      "Population       5.400167e-46\n",
      "Population_sq    5.116463e-21\n",
      "Murder           6.870379e-14\n",
      "Robbery          1.821382e-03\n",
      "dtype: float64\n",
      "R squared  0.9987417422426107\n"
     ]
    }
   ],
   "source": [
    "#attempt to run f-test\n",
    "linear_formula = 'Propertycrime ~ Population+Population_sq+Murder+Robbery'\n",
    "lm = smf.ols(formula=linear_formula, data=fbi_df).fit()\n",
    "#won't work\n",
    "print('\\nCoefficients: ',lm.params)\n",
    "print('\\nP values ',lm.pvalues)\n",
    "print('R squared ',lm.rsquared)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intercept      87.065798\n",
      "Population      0.012188\n",
      "Murder        228.489351\n",
      "Robbery        -1.923886\n",
      "dtype: float64\n",
      "Intercept     1.686821e-05\n",
      "Population    1.491247e-28\n",
      "Murder        3.427028e-58\n",
      "Robbery       1.610506e-03\n",
      "dtype: float64\n",
      "0.9983708205913115\n"
     ]
    }
   ],
   "source": [
    "linear_formula = 'Propertycrime ~ Population+Murder+Robbery'\n",
    "lm = smf.ols(formula=linear_formula, data=fbi_df).fit()\n",
    "print(lm.params)\n",
    "print(lm.pvalues)\n",
    "print(lm.rsquared)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
